import{d as s}from"./app.d8cb38ab.js";const n={},a=s('<h2 id="作用域的理解" tabindex="-1"><a class="header-anchor" href="#作用域的理解" aria-hidden="true">#</a> 作用域的理解</h2><p><strong>作用域</strong>是在运行时代码中的某些特定部分中变量，函数和对象的可访问性。</p><p><strong>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域</strong>。</p><ul><li><strong>全局作用域</strong>：全局作用域为程序的最外层作用域，一直存在。</li><li><strong>函数作用域</strong>：函数作用域只有函数被定义时才会创建，包含在父级函数作用域 / 全局作用域内。</li></ul><blockquote><p>由于作用域的限制，每段独立的执行代码块只能访问自己作用域和外层作用域中的变量，无法访问到内层作用域的变量。</p></blockquote><h3 id="词法作用域" tabindex="-1"><a class="header-anchor" href="#词法作用域" aria-hidden="true">#</a> 词法作用域</h3><p><strong>词法作用域</strong>，意味着函数被定义的时候，它的作用域就已经确定了，和调用位置没有关系，因此词法作用域也被称为 <u>“静态作用域”</u>。</p><h2 id="块级作用域-let、const" tabindex="-1"><a class="header-anchor" href="#块级作用域-let、const" aria-hidden="true">#</a> 块级作用域（let、const）</h2><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>块语句（大括号“｛｝”中间的语句），如 if 和 switch 条件语句或 for 和 while 循环语句，不像函数，它们不会创建一个新的作用域</strong>。</p></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// &#39;if&#39; 条件语句块不会创建一个新的作用域</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Oops&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// name 依然在全局作用域中</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(name); </span><span style="color:#88846F;">// &#39;Oops&#39;</span></span>\n<span class="line"></span></code></pre></div><h3 id="let-和-const" tabindex="-1"><a class="header-anchor" href="#let-和-const" aria-hidden="true">#</a> let 和 const</h3><blockquote><p>ES6 新增了<code>let</code>和<code>const</code>命令，可以用来创建块级作用域变量，使用<code>let</code>命令声明的变量只在<code>let</code>命令所在<code>代码块</code>内有效。</p></blockquote><h2 id="什么是作用域链" tabindex="-1"><a class="header-anchor" href="#什么是作用域链" aria-hidden="true">#</a> 什么是作用域链</h2><p>当可执行代码内部访问变量时，会先查找本地作用域，如果找到目标变量即返回，否则会去父级作用域继续查找...一直找到全局作用域。我们把这种作用域的嵌套机制，称为 <strong>作用域链</strong>。</p><h2 id="作用域与执行上下文" tabindex="-1"><a class="header-anchor" href="#作用域与执行上下文" aria-hidden="true">#</a> 作用域与执行上下文</h2><p>JavaScript 属于解释型语言，JavaScript 的执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样：</p><p><strong>解释阶段：</strong></p><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定</li></ul><p><strong>执行阶段：</strong></p><ul><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul><p>作用域和执行上下文之间最大的区别是： <strong>执行上下文在运行时确定，随时可能改变；作用域在定义时就确定，并且不会改变</strong>。</p><h2 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h2><p>在全局作用域中或还是在局部作用域中，函数及使用<code>var</code>关键字声明的变量，都会被提升到该作用域的最顶部，这就是<strong>变量提升</strong>。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> tmp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Date</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(tmp);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> tmp</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// 这里变量会提升</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">(); </span><span style="color:#88846F;">// undefined</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 提升后代码</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> tmp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Date</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> tmp;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(tmp);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        tmp</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"></span></code></pre></div><h6 id="变量和函数同时出现的提升" tabindex="-1"><a class="header-anchor" href="#变量和函数同时出现的提升" aria-hidden="true">#</a> 变量和函数同时出现的提升</h6><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(foo);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> foo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Oops&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(){}</span></span>\n<span class="line"><span style="color:#88846F;">// 等价于</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (){}</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(foo);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> foo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Oops&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"></span></code></pre></div><ol><li>函数声明被提升到最顶上；</li><li>声明只进行一次，因此后面的声明会被忽略。</li><li>函数声明的优先级优于变量声明，且函数声明会连带定义一起被提升（这里与变量不同）</li></ol><h2 id="var、let、const-的区别" tabindex="-1"><a class="header-anchor" href="#var、let、const-的区别" aria-hidden="true">#</a> var、let、const 的区别</h2><ol><li><p>var 声明的变量会提升，let 和 const 不会</p></li><li><p>let 添加了块级作用域，var 没有块级作用域</p></li><li><p>let 不可重复声明，重复声明会报错，var 可以</p></li><li><p>const 声明的是常量，声明时必须初始化，后面出现的代码中不能修改该常量的值，let, var 可以后续在定义。</p></li><li><p>全局范围内声明变量 let 不会成为顶级对象的属性（不会挂载到 window ），是独立存在的变量；var 自动成为顶级对象的属性（可通过 window 调用）。</p></li></ol>',29);n.render=function(s,n){return a};export default n;
