import{r as s,o as n,c as a,a as l,F as o,b as p,d as e}from"./app.d8cb38ab.js";const t={},F=l("h2",{id:"数据类型",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#数据类型","aria-hidden":"true"},"#"),p(" 数据类型")],-1),r=l("p",null,"最新的 ECMAScript 标准定义了 8 种数据类型：",-1),c=p("有7种基本类型："),y={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/String",target:"_blank",rel:"noopener noreferrer"},i=p("string"),d=p("，"),f={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Number",target:"_blank",rel:"noopener noreferrer"},E=p("number"),b=p("，"),u={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/BigInt",target:"_blank",rel:"noopener noreferrer"},h=p("bigint"),g=p("，"),A={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Boolean",target:"_blank",rel:"noopener noreferrer"},D=p("boolean"),B=p("，"),m={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Null",target:"_blank",rel:"noopener noreferrer"},x=p("null"),v=p("，"),N={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/undefined",target:"_blank",rel:"noopener noreferrer"},z=p("undefined"),S=p("，"),j={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol",target:"_blank",rel:"noopener noreferrer"},k=p("symbol"),C=p(" ("),G={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/ECMAScript",target:"_blank",rel:"noopener noreferrer"},_=p("ECMAScript"),w=p(" 2016新增)"),O=p("1种引用类型："),M={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Object",target:"_blank",rel:"noopener noreferrer"},R=p("Object"),q=e('<h6 id="变量在内存中的具体存储形式" tabindex="-1"><a class="header-anchor" href="#变量在内存中的具体存储形式" aria-hidden="true">#</a> 变量在内存中的具体存储形式</h6><p><strong>基本类型</strong>是保存在<strong>栈内存</strong>中的简单数据段，它们的值都有固定的大小，保存在栈空间，通过按值访问。</p><p><strong>引用类型</strong>是保存在<strong>堆内存</strong>中的对象，值大小不固定，<u>栈内存中存放的该对象的访问地址</u>指向堆内存中的对象，JavaScript不允许直接访问堆内存中的位置，因此操作对象时，实际操作对象的引用。</p><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h2><p><code>typeof</code>可以准确判断除了<code>null</code>以外的基本类型</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// JavaScript 诞生以来便如此</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span></span>\n<span class="line"><span style="color:#88846F;">// 数值</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;number&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;number&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// 尽管它是 &quot;Not-A-Number&quot; (非数值) 的缩写</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;number&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// Number 会尝试把参数解析成数值</span></span>\n<span class="line"><span style="color:#88846F;">// 字符串</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// typeof 总是返回一个字符串</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// String 将任意值转换为字符串，比 toString 更安全</span></span>\n<span class="line"><span style="color:#88846F;">// 布尔值</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Boolean</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// Boolean() 会基于参数是真值还是虚值进行转换</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!!</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// 两次调用 ! (逻辑非) 操作符相当于 Boolean()</span></span>\n<span class="line"><span style="color:#88846F;">// Symbols</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Symbol</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;symbol&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;symbol&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Symbol</span><span style="color:#F8F8F2;">.iterator </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;symbol&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#88846F;">// Undefined</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#88846F;">// 对象</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> {a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Date</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">regex</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {} </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">C</span><span style="color:#F8F8F2;"> {} </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span></span>\n<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div></div><h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h2><p><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p><p>（判断某个变量是否为某一对象的实例）</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">String</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// false</span></span>\n<span class="line"><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Boolean</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// false</span></span>\n<span class="line"><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Number</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// false</span></span>\n<span class="line"><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Object</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// false</span></span>\n<span class="line"><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Object</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// false</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Object</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 报错 x is not defined</span></span>\n<span class="line"><span style="color:#F8F8F2;">{} </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Object</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">String</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Boolean</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Boolean</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Number</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#F8F8F2;">[] </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Array</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Array</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Date</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Date</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">RegExp</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">RegExp</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">hello</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">RegExp</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>\n<span class="line"></span></code></pre></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2>',11);t.render=function(p,e){const t=s("OutboundLink");return n(),a(o,null,[F,r,l("p",null,[c,l("a",y,[i,l(t)]),d,l("a",f,[E,l(t)]),b,l("a",u,[h,l(t)]),g,l("a",A,[D,l(t)]),B,l("a",m,[x,l(t)]),v,l("a",N,[z,l(t)]),S,l("a",j,[k,l(t)]),C,l("a",G,[_,l(t)]),w]),l("p",null,[O,l("a",M,[R,l(t)])]),q],64)};export default t;
