import{d as s}from"./app.d8cb38ab.js";const n={},a=s('<h2 id="扁平数据结构转tree" tabindex="-1"><a class="header-anchor" href="#扁平数据结构转tree" aria-hidden="true">#</a> 扁平数据结构转Tree</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">/**</span></span>\n<span class="line"><span style="color:#88846F;"> * 有 扁平数据</span></span>\n<span class="line"><span style="color:#88846F;">  let arr = [</span></span>\n<span class="line"><span style="color:#88846F;">    { id: 1, name: &#39;部门1&#39;, pid: 0 },</span></span>\n<span class="line"><span style="color:#88846F;">    { id: 2, name: &#39;部门2&#39;, pid: 1 },</span></span>\n<span class="line"><span style="color:#88846F;">    { id: 3, name: &#39;部门3&#39;, pid: 1 },</span></span>\n<span class="line"><span style="color:#88846F;">    { id: 4, name: &#39;部门4&#39;, pid: 3 },</span></span>\n<span class="line"><span style="color:#88846F;">    { id: 5, name: &#39;部门5&#39;, pid: 4 },</span></span>\n<span class="line"><span style="color:#88846F;">  ];</span></span>\n<span class="line"><span style="color:#88846F;"> **********************</span></span>\n<span class="line"><span style="color:#88846F;"> * 输出如下</span></span>\n<span class="line"><span style="color:#88846F;">[</span></span>\n<span class="line"><span style="color:#88846F;">    {</span></span>\n<span class="line"><span style="color:#88846F;">        &quot;id&quot;: 1,</span></span>\n<span class="line"><span style="color:#88846F;">        &quot;name&quot;: &quot;部门1&quot;,</span></span>\n<span class="line"><span style="color:#88846F;">        &quot;pid&quot;: 0,</span></span>\n<span class="line"><span style="color:#88846F;">        &quot;children&quot;: [</span></span>\n<span class="line"><span style="color:#88846F;">            {</span></span>\n<span class="line"><span style="color:#88846F;">                &quot;id&quot;: 2,</span></span>\n<span class="line"><span style="color:#88846F;">                &quot;name&quot;: &quot;部门2&quot;,</span></span>\n<span class="line"><span style="color:#88846F;">                &quot;pid&quot;: 1,</span></span>\n<span class="line"><span style="color:#88846F;">                &quot;children&quot;: []</span></span>\n<span class="line"><span style="color:#88846F;">            },</span></span>\n<span class="line"><span style="color:#88846F;">            {</span></span>\n<span class="line"><span style="color:#88846F;">                &quot;id&quot;: 3,</span></span>\n<span class="line"><span style="color:#88846F;">                &quot;name&quot;: &quot;部门3&quot;,</span></span>\n<span class="line"><span style="color:#88846F;">                &quot;pid&quot;: 1,</span></span>\n<span class="line"><span style="color:#88846F;">                &quot;children&quot;: [</span></span>\n<span class="line"><span style="color:#88846F;">                    // 结果 ,,,</span></span>\n<span class="line"><span style="color:#88846F;">                ]</span></span>\n<span class="line"><span style="color:#88846F;">            }</span></span>\n<span class="line"><span style="color:#88846F;">        ]</span></span>\n<span class="line"><span style="color:#88846F;">    }</span></span>\n<span class="line"><span style="color:#88846F;">]</span></span>\n<span class="line"><span style="color:#88846F;"> */</span></span>\n<span class="line"></span></code></pre></div><h3 id="暴力递归" tabindex="-1"><a class="header-anchor" href="#暴力递归" aria-hidden="true">#</a> 暴力递归</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门1&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门2&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门3&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门4&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门5&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门6&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门7&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门8&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门9&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门10&#39;</span><span style="color:#F8F8F2;">, pid: </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 递归 --- 暴力法</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">arrayToTree</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">pid</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> arr) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (item.pid </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> pid) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      item.children </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">arrayToTree</span><span style="color:#F8F8F2;">(arr, item.id);</span></span>\n<span class="line"><span style="color:#F8F8F2;">      result.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(item);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> result;</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 引用版</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">arrayToTree</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">pid</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#A6E22E;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">parent</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> children </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#A6E22E;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">child</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> child.pid </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> parent.id;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    parent.children </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> children </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> [];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> parent.pid </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> pid;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  });</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="lru-最近最少使用-缓存机制" tabindex="-1"><a class="header-anchor" href="#lru-最近最少使用-缓存机制" aria-hidden="true">#</a> LRU（最近最少使用）缓存机制</h2><blockquote><ol><li>需要提供<code>put</code>方法，用于写入不同的缓存数据，如果是同一站点重复写入，就覆盖;</li><li>当缓存达到上限时， 调用<code>put</code>写入缓存之前, 要删除<strong>最近最少使用的数据</strong>；</li><li>提供<code>get</code>方法，用于读取缓存数据，同时需要把被读取的数据，移动到<strong>最近使用数据</strong>；</li><li>考虑到读取性能，希望<code>get</code>操作的复杂度是<code>O(1)</code>（简单理解就是，读取缓存时不能去遍历所有数据）</li></ol></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">/**</span></span>\n<span class="line"><span style="color:#88846F;"> * LRU</span></span>\n<span class="line"><span style="color:#88846F;"> * </span><span style="color:#66D9EF;font-style:italic;">@param</span><span style="color:#88846F;"> </span><span style="color:#A6E22E;text-decoration:underline;">{Number}</span><span style="color:#88846F;"> </span><span style="color:#F8F8F2;">capacity</span><span style="color:#88846F;"> 最大容量</span></span>\n<span class="line"><span style="color:#88846F;"> */</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">LRUCache</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">capacity</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Map</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.capacity </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> capacity;</span></span>\n<span class="line"><span style="color:#F8F8F2;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">LRUCache</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(key)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 存在就更新</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> temp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(key);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 先删除该数据，再将其加入到末尾（保证该数据为最近使用数据）</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(key);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, temp);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> temp;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">LRUCache</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">put</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(key)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 存在就更新（先删除后加入）</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(key);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.size </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.capacity) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 不存在就加入</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 超过缓存最大值，则移除最近最少使用的数据再加入</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> firstKey </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">().value;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(firstKey);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 加入</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, value);</span></span>\n<span class="line"><span style="color:#F8F8F2;">};</span></span>\n<span class="line"></span></code></pre></div>',7);n.render=function(s,n){return a};export default n;
