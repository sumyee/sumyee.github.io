import{r as s,o as n,c as a,a as l,F as p,d as o,b as e}from"./app.d8cb38ab.js";const c={},F=o('<h1 id="webpack-4-笔记" tabindex="-1"><a class="header-anchor" href="#webpack-4-笔记" aria-hidden="true">#</a> webpack(4) 笔记</h1><h2 id="基础配置" tabindex="-1"><a class="header-anchor" href="#基础配置" aria-hidden="true">#</a> 基础配置</h2><h3 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a> 初始化项目</h3><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install webpack webpack-cli -D</span></span>\n<span class="line"></span></code></pre></div><h3 id="entry" tabindex="-1"><a class="header-anchor" href="#entry" aria-hidden="true">#</a> entry</h3><blockquote><ul><li>入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部 <strong>依赖图(dependency graph)</strong> 的开始。</li><li>进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</li><li>默认值是 <code>./src/index.js</code></li></ul></blockquote><p><code>entry</code> 的值可以是一个字符串，一个数组或是一个对象。</p><ul><li><p><strong>字符串</strong>：以对应的文件为入口</p></li><li><p><strong>数组</strong>：表示有多个主入口。多个依赖文件一起注入时用。</p></li><li><p><strong>对象</strong>：多页面配置</p></li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  entry: </span><span style="color:#E6DB74;">&#39;./src/index.js&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">//webpack的默认配置</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> output</h3><blockquote><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  entry: </span><span style="color:#E6DB74;">&#39;./src/index.js&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// webpack的默认配置</span></span>\n<span class="line"><span style="color:#F8F8F2;">  output: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    path: path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;dist&#39;</span><span style="color:#F8F8F2;">), </span><span style="color:#88846F;">// 输出的路径（绝对路径）</span></span>\n<span class="line"><span style="color:#F8F8F2;">    filename: </span><span style="color:#E6DB74;">&#39;bundle.[hash].js&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 输出的文件 /[name].bundle.js</span></span>\n<span class="line"><span style="color:#F8F8F2;">    publicPath: </span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 通常是CDN地址</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p>可以使用以下替换模板字符串：</p><table><thead><tr><th><strong>模板</strong></th><th>描述</th></tr></thead><tbody><tr><td>[hash]</td><td>模块标识符(module identifier)的 hash</td></tr><tr><td>[chunkhash]</td><td>chunk 内容的 hash</td></tr><tr><td>[name]</td><td>模块名称</td></tr><tr><td>[id]</td><td>模块标识符(module identifier)</td></tr><tr><td>[query]</td><td>模块的 query，例如，文件名 <code>?</code> 后面的字符串</td></tr><tr><td>[function]</td><td>函数，它可以返回文件名[string]</td></tr></tbody></table>',14),t=l("code",null,"[hash]",-1),r=e(" 和 "),i=l("code",null,"[chunkhash]",-1),y=e(" 的长度可以使用 "),d=l("code",null,"[hash:16]",-1),u=e("（默认为20）来指定。或者，通过指定"),b={href:"https://v4.webpack.docschina.org/configuration/output/#output-hashdigestlength",target:"_blank",rel:"noopener noreferrer"},h=l("code",null,"output.hashDigestLength",-1),g=e(" 在全局配置长度。"),E=l("p",null,"如果将这个选项设为一个函数，函数将返回一个包含上面表格中替换信息的对象。",-1),m=e("在使用 "),k={href:"https://v4.webpack.docschina.org/plugins/extract-text-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},D=l("code",null,"ExtractTextWebpackPlugin",-1),f=e(" 时，可以用 "),v=l("code",null,"[contenthash]",-1),x=e(" 来获取提取文件的 hash（既不是 "),j=l("code",null,"[hash]",-1),B=e(" 也不是 "),q=l("code",null,"[chunkhash]",-1),w=e("）。"),A=o('<h3 id="mode" tabindex="-1"><a class="header-anchor" href="#mode" aria-hidden="true">#</a> mode</h3><blockquote><p>可选项： <code>development</code>、<code>production</code> 、 <code>none</code></p><p><strong>webpack</strong> 根据对应<strong>mode</strong>在相应环境下优化。其默认值为 <code>production</code>。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  mode: </span><span style="color:#E6DB74;">&#39;production&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">};</span></span>\n<span class="line"></span></code></pre></div><h3 id="devtool" tabindex="-1"><a class="header-anchor" href="#devtool" aria-hidden="true">#</a> devtool</h3><blockquote><p>配置生成 <code>source map</code>。</p><p>将编译后的代码映射回原始源代码，不同的值会明显影响到构建和重新构建的速度。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  devtool: </span><span style="color:#E6DB74;">&#39;cheap-module-eval-source-map&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">//开发环境下使用</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><table><thead><tr><th style="text-align:left;"><strong>模式</strong></th><th>解释</th></tr></thead><tbody><tr><td style="text-align:left;">eval</td><td>每个 module 会封装到 eval 里包裹起来执行，并且会在末尾追加注释 <code>//@ sourceURL</code>.</td></tr><tr><td style="text-align:left;">source-map</td><td>生成一个 SourceMap 文件.</td></tr><tr><td style="text-align:left;">hidden-source-map</td><td>和 source-map 一样，但不会在 bundle 末尾追加注释.</td></tr><tr><td style="text-align:left;">inline-source-map</td><td>生成一个 DataUrl 形式的 SourceMap 文件.</td></tr><tr><td style="text-align:left;">eval-source-map</td><td>每个 module 会通过 eval() 来执行，并且生成一个 DataUrl 形式的 SourceMap .</td></tr><tr><td style="text-align:left;">cheap-source-map</td><td>生成一个没有列信息（column-mappings）的 SourceMaps 文件，不包含 loader 的 sourcemap（譬如 babel 的 sourcemap）</td></tr><tr><td style="text-align:left;">cheap-module-source-map</td><td>生成一个没有列信息（column-mappings）的 SourceMaps 文件，同时 loader 的 sourcemap 也被简化为只包含对应行的。</td></tr></tbody></table><p>开发环境推荐：<code>cheap-module-eval-source-map</code></p><p>生产环境推荐：<code>cheap-module-source-map</code></p><h3 id="html-插件" tabindex="-1"><a class="header-anchor" href="#html-插件" aria-hidden="true">#</a> HTML 插件</h3><h4 id="html-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#html-webpack-plugin" aria-hidden="true">#</a> html-webpack-plugin</h4><blockquote><p>自动生成 HTML 文件，并插入输出结果。</p></blockquote><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install html-webpack-plugin -D </span></span>\n<span class="line"></span></code></pre></div><p>修改 <code>webpack.config.js</code> 文件。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//首先引入插件</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> HtmlWebpackPlugin </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;html-webpack-plugin&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">  plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">HtmlWebpackPlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">      template: </span><span style="color:#E6DB74;">&#39;./public/index.html&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">      filename: </span><span style="color:#E6DB74;">&#39;index.html&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//打包后的文件名</span></span>\n<span class="line"><span style="color:#F8F8F2;">      minify: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        removeAttributeQuotes: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//是否删除属性的双引号</span></span>\n<span class="line"><span style="color:#F8F8F2;">        collapseWhitespace: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//是否折叠空白</span></span>\n<span class="line"><span style="color:#F8F8F2;">      },</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// hash: true //是否加上hash，默认是 false</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="clean-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#clean-webpack-plugin" aria-hidden="true">#</a> clean-webpack-plugin</h4><blockquote><p>每次打包前，清除目录</p></blockquote><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install clean-webpack-plugin -D</span></span>\n<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { CleanWebpackPlugin } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;clean-webpack-plugin&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">  plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 不传参数时，默认找到 outputPath</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">CleanWebpackPlugin</span><span style="color:#F8F8F2;">(),</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 如果希望某些目录不被删除</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">CleanWebpackPlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">      cleanOnceBeforeBuildPatterns:[</span><span style="color:#E6DB74;">&#39;**/*&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;!dll&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;!dll/**&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// 不删除dll目录下的文件</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server" aria-hidden="true">#</a> webpack-dev-server</h4><blockquote><p>在浏览器中实时查看效果</p></blockquote><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install webpack-dev-server -D</span></span>\n<span class="line"></span></code></pre></div><p>修改 <code>webpack.config.js</code> 文件。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">  devServer: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    port: </span><span style="color:#E6DB74;">&#39;3000&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//默认是8080</span></span>\n<span class="line"><span style="color:#F8F8F2;">    quiet: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//默认不启用</span></span>\n<span class="line"><span style="color:#F8F8F2;">    inline: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//默认开启 inline 模式，如果设置为false,开启 iframe 模式</span></span>\n<span class="line"><span style="color:#F8F8F2;">    stats: </span><span style="color:#E6DB74;">&quot;errors-only&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//终端仅打印 error</span></span>\n<span class="line"><span style="color:#F8F8F2;">    overlay: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//默认不启用</span></span>\n<span class="line"><span style="color:#F8F8F2;">    clientLogLevel: </span><span style="color:#E6DB74;">&quot;silent&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//日志等级</span></span>\n<span class="line"><span style="color:#F8F8F2;">    compress: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">//是否启用 gzip 压缩</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="处理样式文件" tabindex="-1"><a class="header-anchor" href="#处理样式文件" aria-hidden="true">#</a> 处理样式文件</h3><blockquote><p>处理 css</p></blockquote><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install style-loader less less-loader css-loader postcss-loader autoprefixer -D</span></span>\n<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ...</span></span>\n<span class="line"><span style="color:#F8F8F2;">  module:  {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    rules: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">      {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        test:</span><span style="color:#E6DB74;"> /</span><span style="color:#AE81FF;">\\.</span><span style="color:#E6DB74;">(less</span><span style="color:#F92672;">|</span><span style="color:#E6DB74;">css)</span><span style="color:#F92672;">$</span><span style="color:#E6DB74;">/</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">        use: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">          {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            loader: </span><span style="color:#E6DB74;">&#39;style-loader&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 将样式 &lt;style&gt; 插入到 head 标签中</span></span>\n<span class="line"><span style="color:#F8F8F2;">            options: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">              insertAt: </span><span style="color:#E6DB74;">&#39;top&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 插入到 head 的顶部，防止覆盖 head 里原有style</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">          },</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#E6DB74;">&#39;css-loader&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 处理 css。负责处理 @import 等语句</span></span>\n<span class="line"><span style="color:#F8F8F2;">          {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#88846F;">// 进一步处理 css 文件，压缩 CSS 等 </span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#88846F;">// 配合 autoprefixer 自动生成浏览器兼容性前缀</span></span>\n<span class="line"><span style="color:#F8F8F2;">            loader: </span><span style="color:#E6DB74;">&#39;postcss-loader&#39;</span><span style="color:#F8F8F2;">, </span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#88846F;">// options -&gt; 创建 postcss.config.js 配置文件</span></span>\n<span class="line"><span style="color:#F8F8F2;">          },</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#E6DB74;">&#39;less-loader&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 处理编译 .less 文件,将其转为 css</span></span>\n<span class="line"><span style="color:#F8F8F2;">        ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p>在项目根目录中创建 <code>postcss.config.js</code></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;autoprefixer&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p>在项目根目录添加 <code>.browserslistrc</code> 文件；或者在<code>package.json</code>文件中添加 <code>browserslist</code></p><div class="language-json ext-json"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// package.json ( 与 devDependencies 同级 ) </span></span>\n<span class="line"><span style="color:#E6DB74;">&quot;browserslist&quot;</span><span style="color:#F8F8F2;">: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;defaults&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;not ie &lt;= 8&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;last 2 versions&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;&gt; 1%&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;iOS &gt;= 7&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;Android &gt;= 4.0&quot;</span></span>\n<span class="line"><span style="color:#F8F8F2;">]</span></span>\n<span class="line"></span></code></pre></div><h4 id="mini-css-extract-plugin" tabindex="-1"><a class="header-anchor" href="#mini-css-extract-plugin" aria-hidden="true">#</a> mini-css-extract-plugin</h4><blockquote><p>抽离 css 样式，将 css 提取到不同的文件中，以 link 标签嵌入页面。</p></blockquote><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install mini-css-extract-plugin -D</span></span>\n<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> MiniCssExtractPlugin </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;mini-css-extract-plugin&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MiniCssExtractPlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">      filename: </span><span style="color:#E6DB74;">&#39;css/main.css&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 抽离出来的文件名称 默认 [name].css</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 如果你的output的publicPath配置的是 &#39;./&#39; 这种相对路径，那么如果将css文件放在单独目录下，</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 在这里指定一下publicPath </span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// publicPath:&#39;../&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })],</span></span>\n<span class="line"><span style="color:#F8F8F2;">  module: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    rules: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">      {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        test:</span><span style="color:#E6DB74;"> /</span><span style="color:#AE81FF;">\\.</span><span style="color:#E6DB74;">css</span><span style="color:#F92672;">$</span><span style="color:#E6DB74;">/</span><span style="color:#F92672;">i</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">        use: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">          MiniCssExtractPlugin.loader, </span><span style="color:#88846F;">// 这里替换了之前的 style-loader</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#E6DB74;">&quot;css-loader&quot;</span></span>\n<span class="line"><span style="color:#F8F8F2;">        ],</span></span>\n<span class="line"><span style="color:#F8F8F2;">      },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ],</span></span>\n<span class="line"><span style="color:#F8F8F2;">  },</span></span>\n<span class="line"><span style="color:#F8F8F2;">};</span></span>\n<span class="line"></span></code></pre></div><h4 id="optimize-css-assets-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#optimize-css-assets-webpack-plugin" aria-hidden="true">#</a> optimize-css-assets-webpack-plugin</h4><blockquote><p>压缩抽离的css文件</p><p><em>(在 <strong>webpack5</strong> 中，改用了 <code>css-minimizer-webpack-plugin</code>)</em></p></blockquote><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install optimize-css-assets-webpack-plugin -D</span></span>\n<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> OptimizeCssPlugin </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;optimize-css-assets-webpack-plugin&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  entry: </span><span style="color:#E6DB74;">&#39;./src/index.js&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//....</span></span>\n<span class="line"><span style="color:#F8F8F2;">  plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">OptimizeCssPlugin</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ],</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="高版本es语法转化" tabindex="-1"><a class="header-anchor" href="#高版本es语法转化" aria-hidden="true">#</a> 高版本ES语法转化</h3><blockquote><p>兼容低版本浏览器 - 需要将高版本语法转化为低版本浏览器可执行代码</p></blockquote><h4 id="插件和预设的执行顺序" tabindex="-1"><a class="header-anchor" href="#插件和预设的执行顺序" aria-hidden="true">#</a> 插件和预设的执行顺序</h4><ul><li>插件先执行，预设后执行</li><li>插件集从前往后执行</li><li>预设集从后往前执行</li></ul><h4 id="babel-core" tabindex="-1"><a class="header-anchor" href="#babel-core" aria-hidden="true">#</a> @babel/core</h4><blockquote><p><code>babel</code> 的核心库</p></blockquote><h4 id="babel-runtime-corejs3" tabindex="-1"><a class="header-anchor" href="#babel-runtime-corejs3" aria-hidden="true">#</a> @babel/runtime-corejs3</h4><blockquote><p>处理转换 api</p></blockquote><h4 id="babel-preset-env" tabindex="-1"><a class="header-anchor" href="#babel-preset-env" aria-hidden="true">#</a> @babel/preset-env</h4><blockquote><p><code>@babel/preset-env</code> 可以根据配置的目标浏览器或者运行环境来自动将<code>ES2015+</code>的代码转换为<code>es5</code>。</p><p><strong><u>只转换syntax（class，typeof，箭头函数），不转换api（map，includes）</u></strong></p></blockquote><h4 id="babel-polyfill、-babel-babel-runtime、-babel-plugin-transform-runtime-解析" tabindex="-1"><a class="header-anchor" href="#babel-polyfill、-babel-babel-runtime、-babel-plugin-transform-runtime-解析" aria-hidden="true">#</a> @babel/polyfill、@babel/babel-runtime、@babel/plugin-transform-runtime 解析</h4><ul><li><h4 id="babel-polyfill" tabindex="-1"><a class="header-anchor" href="#babel-polyfill" aria-hidden="true">#</a> @babel/polyfill</h4><blockquote><p><code>@babel/polyfill</code>在<code>Babel 7.4.0</code>已被废弃</p><p>推荐直接添加<code>core-js</code>和通过<code>corejs</code>选项设置版本</p></blockquote><p>通过改写全局<code>prototype</code>的方式实现，<em><strong>它会加载整个<code>polyfill</code></strong></em>，针对编译的代码中新的 API 进行处理，并且在代码中插入一些帮助函数，<u>比较适合单独运行的项目</u>。</p><p><code>babel-polyfill</code><u>解决了<code>Babel</code>不转换新 API 的问题，但是直接在代码中插入帮助函数，会导致污染了全局环境，并且不同的代码文件中包含重复的代码，导致编译后的代码体积变大。</u></p></li><li><h4 id="babel-babel-runtime-必须装在-dependencies" tabindex="-1"><a class="header-anchor" href="#babel-babel-runtime-必须装在-dependencies" aria-hidden="true">#</a> @babel/babel-runtime (必须装在 dependencies)</h4><p><code>Babel</code>为了解决上述问题，提供了单独的包<code>babel-runtime</code>用以提供编译模块的工具函数，启用插件<code>babel-plugin-transform-runtime</code>后，Babel就会使用<code>babel-runtime</code>下的工具函数。</p><p><code>babel-runtime</code>插件能够将这些工具函数的代码转换成require语句，指向为对<code>babel-runtime</code>的引用。每当要转译一个<code>api</code>时都要手动加上<code>require(&#39;babel-runtime&#39;)</code>。</p><p>简单说 <code>babel-runtime</code> 更像是一种按需加载的实现，比如你哪里需要使用 Promise，只要在这个文件头部 <code>require Promise from &#39;babel-runtime/core-js/promise&#39;</code>就行了。</p></li><li><h4 id="babel-plugin-transform-runtime" tabindex="-1"><a class="header-anchor" href="#babel-plugin-transform-runtime" aria-hidden="true">#</a> @babel/plugin-transform-runtime</h4><p>为了方便使用 <code>babel-runtime</code>，解决手动 <code>require</code> 的苦恼。它会分析我们的 <code>AST</code> 中，是否有引用 <code>babel-rumtime</code> 中的垫片（通过映射关系），如果有，就会在当前模块顶部插入我们需要的垫片。</p><p><u><code>transform-runtime</code> 是利用 <code>plugin</code> 自动识别并替换代码中的新特性，不需要再手动引入，只需要装好 <code>babel-runtime</code> 和 配好 <code>plugin</code> 就可以了。</u></p><p><strong>好处</strong>：按需替换，检测到你需要哪个，就引入哪个 <code>polyfill</code>，如果只用了一部分，打包完的文件体积对比 <code>@babel/polyfill</code> 会小很多。而且 <code>transform-runtime</code> 不会污染原生的对象，方法，也不会对其他 <code>polyfill</code> 产生影响。</p></li></ul><blockquote><p><strong>@babel/runtime 和 @babel/plugin-transform-runtime 的关系：</strong></p><ul><li>plugin-transform-runtime 用于<code>编译时</code>转译代码，真正的polyfill在代码<code>运行时</code>从babel/runtime里引入，所以plugin-transform-runtime 需要安装在<code>开发环境</code>，而babel/runtime安装在<code>生产环境</code>。</li></ul><p><strong>@babel/runtime 和 @babel/runtime-corejs3：</strong></p><ul><li>@babel/runtime包含：helpers、regenerator-runtime。只能处理语法。</li><li>@babel/runtime-corejs3包含：helpers、regenerator-runtime、core-js@3。引入core-js@3处理api。</li></ul></blockquote><ol><li>安装一下 <code>babel-loader</code></li></ol><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install babel-loader -D</span></span>\n<span class="line"></span></code></pre></div><ol start="2"><li>安装其他<code>babel</code>依赖</li></ol><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install @babel/core @babel/preset-env @babel/plugin-transform-runtime -D</span></span>\n<span class="line"><span style="color:#88846F;"># 以下需要安装到 dependencies</span></span>\n<span class="line"><span style="color:#F8F8F2;">npm install @babel/runtime @babel/runtime-corejs3</span></span>\n<span class="line"></span></code></pre></div><p>配置<code>webpack.config.js</code></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  module: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    rules: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">      {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        test:</span><span style="color:#E6DB74;"> /</span><span style="color:#AE81FF;">\\.</span><span style="color:#E6DB74;">jsx</span><span style="color:#F92672;">?$</span><span style="color:#E6DB74;">/</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">        use: [</span><span style="color:#E6DB74;">&#39;babel-loader&#39;</span><span style="color:#F8F8F2;">],</span></span>\n<span class="line"><span style="color:#F8F8F2;">        exclude:</span><span style="color:#E6DB74;"> /node_modules/</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">//排除 node_modules 目录，提升编译效率</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p>根目录创建一个 <code>.babelrc</code></p><div class="language-json ext-json"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// .babelrc</span></span>\n<span class="line"><span style="color:#F8F8F2;">{</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">&quot;presets&quot;</span><span style="color:#F8F8F2;">: [</span><span style="color:#CFCFC2;">&quot;@babel/preset-env&quot;</span><span style="color:#F8F8F2;">],</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">&quot;plugins&quot;</span><span style="color:#F8F8F2;">: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    [</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#CFCFC2;">&quot;@babel/plugin-transform-runtime&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">      {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">&quot;corejs&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 转换 API，相当于 polyfill </span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="进阶配置" tabindex="-1"><a class="header-anchor" href="#进阶配置" aria-hidden="true">#</a> 进阶配置</h2><h3 id="provideplugin-全局变量引入" tabindex="-1"><a class="header-anchor" href="#provideplugin-全局变量引入" aria-hidden="true">#</a> ProvidePlugin（全局变量引入 ）</h3><blockquote><p><code>ProvidePlugin</code> 的作用就是不需要 <code>import</code> 或 <code>require</code> 就可以在项目中到处使用。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> webpack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;webpack&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">/**</span></span>\n<span class="line"><span style="color:#88846F;">   * Vue 的配置后面多了一个 default，这是因为 vue.esm.js 中使用的是 export default 导出的，对于这\t\t\t种，必须要指定 default。</span></span>\n<span class="line"><span style="color:#88846F;">   * React 使用的是 module.exports 导出的，因此不要写 default。</span></span>\n<span class="line"><span style="color:#88846F;">  */</span></span>\n<span class="line"><span style="color:#F8F8F2;">  plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> webpack.</span><span style="color:#A6E22E;">ProvidePlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">      React: </span><span style="color:#E6DB74;">&#39;react&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">      Component: [</span><span style="color:#E6DB74;">&#39;react&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Component&#39;</span><span style="color:#F8F8F2;">],</span></span>\n<span class="line"><span style="color:#F8F8F2;">      Vue: [</span><span style="color:#E6DB74;">&#39;vue/dist/vue.esm.js&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;default&#39;</span><span style="color:#F8F8F2;">],</span></span>\n<span class="line"><span style="color:#F8F8F2;">      $: </span><span style="color:#E6DB74;">&#39;jquery&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">      _map: [</span><span style="color:#E6DB74;">&#39;lodash&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;map&#39;</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><h3 id="多页应用打包" tabindex="-1"><a class="header-anchor" href="#多页应用打包" aria-hidden="true">#</a> 多页应用打包</h3><blockquote><p>生成一个多页应用</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> path </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;path&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> HtmlWebpackPlugin </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;html-webpack-plugin&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  entry: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    app: </span><span style="color:#E6DB74;">&#39;./src/main.js&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    login: </span><span style="color:#E6DB74;">&#39;./src/index.js&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  output: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    path: path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;dist&#39;</span><span style="color:#F8F8F2;">),</span></span>\n<span class="line"><span style="color:#F8F8F2;">    filename: </span><span style="color:#E6DB74;">&#39;[name].[hash:6].js&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">  plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">HtmlWebpackPlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">      template: </span><span style="color:#E6DB74;">&#39;./public/index.html&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">      filename: </span><span style="color:#E6DB74;">&#39;app.html&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//打包后的文件名</span></span>\n<span class="line"><span style="color:#F8F8F2;">      chunks: [</span><span style="color:#E6DB74;">&#39;app&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// 引用的chunck</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }),</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">HtmlWebpackPlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">      template: </span><span style="color:#E6DB74;">&#39;./public/index.html&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">      filename: </span><span style="color:#E6DB74;">&#39;index.html&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">//打包后的文件名</span></span>\n<span class="line"><span style="color:#F8F8F2;">      chunks: [</span><span style="color:#E6DB74;">&#39;index&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// 引用的chunck</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }),</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="webpack解决跨域" tabindex="-1"><a class="header-anchor" href="#webpack解决跨域" aria-hidden="true">#</a> webpack解决跨域</h3><blockquote><p>通过 <code>webpack</code> 配置的方式来实现跨域。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">  devServer: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    proxy: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E6DB74;">&#39;/api&#39;</span><span style="color:#F8F8F2;">: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 将 /api 代理到 http://localhost:3000</span></span>\n<span class="line"><span style="color:#F8F8F2;">        target: </span><span style="color:#E6DB74;">&#39;http://localhost:3000&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 重写 /api </span></span>\n<span class="line"><span style="color:#F8F8F2;">        pathRewrite: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#E6DB74;">&#39;/api&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="前端模拟数据" tabindex="-1"><a class="header-anchor" href="#前端模拟数据" aria-hidden="true">#</a> 前端模拟数据</h3><blockquote><p>前端简单模拟数据</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  devServer: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">before</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">app</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      app.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/api/user&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        res.</span><span style="color:#A6E22E;">json</span><span style="color:#F8F8F2;">({name: </span><span style="color:#E6DB74;">&#39;Oops ~&#39;</span><span style="color:#F8F8F2;">})</span></span>\n<span class="line"><span style="color:#F8F8F2;">      })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="resolve-配置" tabindex="-1"><a class="header-anchor" href="#resolve-配置" aria-hidden="true">#</a> resolve 配置</h3><blockquote><p><code>resolve</code> 配置 <code>webpack</code> 如何寻找模块所对应的文件。</p></blockquote><h4 id="modules" tabindex="-1"><a class="header-anchor" href="#modules" aria-hidden="true">#</a> modules</h4><blockquote><p><code>resolve.modules</code> 配置 <code>webpack</code> 去哪些目录下寻找第三方模块，默认情况下，只会去 <code>node_modules</code> 下寻找</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//....</span></span>\n<span class="line"><span style="color:#F8F8F2;">    resolve: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        modules: [</span><span style="color:#E6DB74;">&#39;./src/components&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;node_modules&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">//从左到右依次查找，先在 ./src/components 下寻找，找不到就去 node_modules 下寻找</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias</h4><blockquote><p><code>resolve.alias</code> 配置项通过别名把原导入路径映射成一个新的导入路径</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//....</span></span>\n<span class="line"><span style="color:#F8F8F2;">    resolve: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        alias: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#E6DB74;">&#39;@&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;./src&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// @ 就映射到 ./src</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="extensions" tabindex="-1"><a class="header-anchor" href="#extensions" aria-hidden="true">#</a> extensions</h4><blockquote><p>寻找文件后缀，如果没有配置 <code>extensions</code>，默认只会找对对应的 js 文件。</p><p>配置后，在引入文件时，可以省略文件后缀。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//....</span></span>\n<span class="line"><span style="color:#F8F8F2;">    resolve: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        extensions: [</span><span style="color:#E6DB74;">&#39;js&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;.json&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;.vue&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// 先匹配 .js 文件，找不到就匹配 .json 文件，最后再匹配 .vue 文件</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="mainfields" tabindex="-1"><a class="header-anchor" href="#mainfields" aria-hidden="true">#</a> mainFields</h4><blockquote><p><code>resolve.mainFields</code> 默认配置是 <code>[&#39;browser&#39;, &#39;main&#39;]</code>，即首先找对应依赖 <code>package.json</code> 中的 <code>brower</code> 字段，如果没有，找 <code>main</code> 字段。</p></blockquote><p>例如 <code>bootstrap</code>，可以查看 <code>bootstrap</code> 的 <code>package.json</code> 文件：</p><div class="language-json ext-json"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;style&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#CFCFC2;">&quot;dist/css/bootstrap.css&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;sass&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#CFCFC2;">&quot;scss/bootstrap.scss&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;main&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#CFCFC2;">&quot;dist/js/bootstrap&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p>如：<code>import &#39;bootstrap&#39;</code> 默认情况下，找得是对应的依赖的 <code>package.json</code> 的 <code>main</code> 字段指定的文件，即 <code>dist/js/bootstrap</code>。</p><p>假设我们希望，<code>import &#39;bootsrap&#39;</code> 默认去找 <code>css</code> 文件的话，可以配置 <code>resolve.mainFields</code> 为:</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//....</span></span>\n<span class="line"><span style="color:#F8F8F2;">    resolve: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        mainFields: [</span><span style="color:#E6DB74;">&#39;style&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;main&#39;</span><span style="color:#F8F8F2;">] </span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="定义环境变量" tabindex="-1"><a class="header-anchor" href="#定义环境变量" aria-hidden="true">#</a> 定义环境变量</h3><blockquote><p>使用 <code>webpack</code> 内置插件 <code>DefinePlugin</code> 来定义环境变量。</p><p>很多时候，我们在开发环境中会使用预发环境或者是本地的域名，生产环境中使用线上域名，我们可以在 <code>webpack</code> 定义环境变量，然后在代码中使用。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.dev.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> webpack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;webpack&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> webpack.</span><span style="color:#A6E22E;">DefinePlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">            DEV: </span><span style="color:#66D9EF;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;dev&#39;</span><span style="color:#F8F8F2;">), </span><span style="color:#88846F;">// 字符串</span></span>\n<span class="line"><span style="color:#F8F8F2;">            FLAG: </span><span style="color:#E6DB74;">&#39;true&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// FLAG 是个布尔类型</span></span>\n<span class="line"><span style="color:#F8F8F2;">        })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//index.js</span></span>\n<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(DEV </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;dev&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//开发环境</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//生产环境</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="优化配置" tabindex="-1"><a class="header-anchor" href="#优化配置" aria-hidden="true">#</a> 优化配置</h2><h3 id="noparse" tabindex="-1"><a class="header-anchor" href="#noparse" aria-hidden="true">#</a> noParse</h3><blockquote><p>不去解析和转化某些包，从而提升性能。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">    module: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        noParse:</span><span style="color:#E6DB74;"> /jquery</span><span style="color:#F92672;">|</span><span style="color:#E6DB74;">lodash/</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="ignoreplugin" tabindex="-1"><a class="header-anchor" href="#ignoreplugin" aria-hidden="true">#</a> IgnorePlugin</h3><blockquote><p><code>webpack</code> 的内置插件，作用是忽略第三方包指定目录。</p></blockquote><p>例如: <code>moment</code> (2.24.0版本) 会将所有本地化内容和核心功能一起打包，此时就可以使用 <code>IgnorePlugin</code> 在打包时忽略本地化内容。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">    plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">//忽略 moment 下的 ./locale 目录</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> webpack.</span><span style="color:#A6E22E;">IgnorePlugin</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/</span><span style="color:#F92672;">^</span><span style="color:#AE81FF;">\\.\\/</span><span style="color:#E6DB74;">locale</span><span style="color:#F92672;">$</span><span style="color:#E6DB74;">/</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;"> /moment</span><span style="color:#F92672;">$</span><span style="color:#E6DB74;">/</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p>使用时，可以手动引入需要用到的语言包</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> moment </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;moment&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;moment/locale/zh-cn&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// 手动引入</span></span>\n<span class="line"></span></code></pre></div><h3 id="dllplugin" tabindex="-1"><a class="header-anchor" href="#dllplugin" aria-hidden="true">#</a> DllPlugin</h3><blockquote><p>动态链接库**（由于 webpack 4 有着比 dll 更好的打包性能，所以 Vue 弃用 dll）**</p><p>将不会频繁更新的库进行编译，当这些依赖的版本没有变化时，就不需要重新编译</p></blockquote><p>创建 <code>webpack.config.dll.js</code> 文件：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// webpack.config.dll.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> path </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;path&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> webpack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;webpack&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    mode: </span><span style="color:#E6DB74;">&#39;development&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    entry: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        react: [</span><span style="color:#E6DB74;">&#39;react&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;react-dom&#39;</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    output: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        filename: </span><span style="color:#E6DB74;">&#39;[name].dll.js&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">        path: path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;../dist&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dll&#39;</span><span style="color:#F8F8F2;">),</span></span>\n<span class="line"><span style="color:#F8F8F2;">        library: </span><span style="color:#E6DB74;">&#39;[name]_dll&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 暴露给外部使用</span></span>\n<span class="line"><span style="color:#F8F8F2;">        libraryTarget: </span><span style="color:#E6DB74;">&#39;umd&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// libraryTarget 指定如何暴露内容，缺省时就是 var</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> webpack.</span><span style="color:#A6E22E;">DllPlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#88846F;">// name 和 library 一致</span></span>\n<span class="line"><span style="color:#F8F8F2;">            name: </span><span style="color:#E6DB74;">&#39;[name]_dll&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#88846F;">// manifest.json 用于让 DLLReferencePlugin 映射到相关依赖上</span></span>\n<span class="line"><span style="color:#F8F8F2;">            path: path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;../dist&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dll&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;manifest.json&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p>在 <code>package.json</code> 的 <code>scripts</code> 中增加:</p><div class="language-json ext-json"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;scripts&quot;</span><span style="color:#F8F8F2;">: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// ...</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">&quot;build:dll&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#CFCFC2;">&quot;webpack --config webpack.config.dll.js&quot;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p><code>webpack.config.js</code> 中的配置：</p><blockquote><p><strong>DllReferencePlugin</strong> 这个插件是在 <em>webpack.config.js</em> 中使用的</p><p>该插件的作用是把在 <em>webpack.config.dll.js</em> 中打包生成的 <strong>dll</strong> 文件引用到需要的预编译的依赖上来。</p><p>就是说在 <em>webpack.config.dll.js</em> 中打包后比如会生成 <em>vendor.dll.js</em>文件和<em>vendor-manifest.json</em>文件，<em>vendor.dll.js</em>文件包含所有的第三方库文件，<em>vendor-manifest.json</em>文件会包含所有库代码的一个索引，当在使用<em>webpack.config.js</em>文件打包<strong>DllReferencePlugin</strong>插件的时候，会使用该<strong>DllReferencePlugin</strong>插件读取<em>vendor-manifest.json</em>文件，看看是否有该第三方库。<em>vendor-manifest.json</em>文件就是有一个第三方库的一个映射而已。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> webpack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;webpack&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> path </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;path&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">    devServer: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        contentBase: path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;dist&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 建立链接，优先查找 json 文件中的映射</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> webpack.</span><span style="color:#A6E22E;">DllReferencePlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">            manifest: path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;dist&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dll&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;manifest.json&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }),</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">CleanWebpackPlugin</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">            cleanOnceBeforeBuildPatterns: [</span><span style="color:#E6DB74;">&#39;**/*&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;!dll&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;!dll/**&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">//不删除dll目录</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }),</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><p>还要在 <code>public/index.html</code>文件中，引入<code>react_dll.js</code>：</p><div class="language-html ext-html"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;./dll/react.dll.js&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>\n<span class="line"></span></code></pre></div><h3 id="happypack" tabindex="-1"><a class="header-anchor" href="#happypack" aria-hidden="true">#</a> happypack</h3><blockquote><p>实现多线程打包**（用于大项目）**</p><p><code>HappyPack</code> 把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。</p></blockquote><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install happypack -D</span></span>\n<span class="line"></span></code></pre></div><p>修改配置<code>webpack.config.js</code>文件:</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> Happypack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;happypack&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">    module: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        rules: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">            {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                test:</span><span style="color:#E6DB74;"> /</span><span style="color:#AE81FF;">\\.</span><span style="color:#E6DB74;">js</span><span style="color:#AE81FF;">[x]</span><span style="color:#F92672;">?$</span><span style="color:#E6DB74;">/</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                use: </span><span style="color:#E6DB74;">&#39;Happypack/loader?id=js&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// id 是为了plugin查找</span></span>\n<span class="line"><span style="color:#F8F8F2;">                include: [path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;src&#39;</span><span style="color:#F8F8F2;">)]</span></span>\n<span class="line"><span style="color:#F8F8F2;">            },</span></span>\n<span class="line"><span style="color:#F8F8F2;">            { </span></span>\n<span class="line"><span style="color:#F8F8F2;">                test:</span><span style="color:#E6DB74;"> /</span><span style="color:#AE81FF;">\\.</span><span style="color:#E6DB74;">css</span><span style="color:#F92672;">$</span><span style="color:#E6DB74;">/</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                use: </span><span style="color:#E6DB74;">&#39;Happypack/loader?id=css&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                include: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;src&#39;</span><span style="color:#F8F8F2;">),</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;node_modules&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bootstrap&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dist&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">                ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Happypack</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">            id: </span><span style="color:#E6DB74;">&#39;js&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 和rule中的id=js对应</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#88846F;">// 将之前 rule 中的 loader 在此配置</span></span>\n<span class="line"><span style="color:#F8F8F2;">            use: [</span><span style="color:#E6DB74;">&#39;babel-loader&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// 必须是数组</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }),</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Happypack</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">            id: </span><span style="color:#E6DB74;">&#39;css&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 和rule中的id=css对应</span></span>\n<span class="line"><span style="color:#F8F8F2;">            use: [</span><span style="color:#E6DB74;">&#39;style-loader&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;css-loader&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;postcss-loader&#39;</span><span style="color:#F8F8F2;">],</span></span>\n<span class="line"><span style="color:#F8F8F2;">        })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="抽离公共代码" tabindex="-1"><a class="header-anchor" href="#抽离公共代码" aria-hidden="true">#</a> 抽离公共代码</h3><blockquote><p><code>optimization.splitChunks</code> 把公共的模块抽离出来，单独打包</p><p>公共代码只需要下载一次就缓存起来了，避免了重复下载。</p></blockquote><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    optimization: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        splitChunks: { </span><span style="color:#88846F;">// 分割代码块</span></span>\n<span class="line"><span style="color:#F8F8F2;">            cacheGroups: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                vendor: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    </span><span style="color:#88846F;">// 第三方依赖</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    priority: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 设置优先级，首先抽离第三方模块</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    name: </span><span style="color:#E6DB74;">&#39;vendor&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    test:</span><span style="color:#E6DB74;"> /node_modules/</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    chunks: </span><span style="color:#E6DB74;">&#39;initial&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    minSize: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    minChunks: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 最少引入了1次</span></span>\n<span class="line"><span style="color:#F8F8F2;">                },</span></span>\n<span class="line"><span style="color:#F8F8F2;">                </span><span style="color:#88846F;">// 缓存组</span></span>\n<span class="line"><span style="color:#F8F8F2;">                common: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    </span><span style="color:#88846F;">// 公共模块</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    chunks: </span><span style="color:#E6DB74;">&#39;initial&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    name: </span><span style="color:#E6DB74;">&#39;common&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    minSize: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 大小超过100个字节</span></span>\n<span class="line"><span style="color:#F8F8F2;">                    minChunks: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 最少引入了3次</span></span>\n<span class="line"><span style="color:#F8F8F2;">                }</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="cache-loader" tabindex="-1"><a class="header-anchor" href="#cache-loader" aria-hidden="true">#</a> cache-loader</h3><blockquote><p>在一些性能开销较大的 <code>loader</code> 之前添加 <code>cache-loader</code>，将结果缓存中磁盘中。默认保存在 <code>node_modueles/.cache/cache-loader</code> 目录下。</p></blockquote><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install cache-loader -D</span></span>\n<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    module: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        rules: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">            {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                test:</span><span style="color:#E6DB74;"> /</span><span style="color:#AE81FF;">\\.</span><span style="color:#E6DB74;">jsx</span><span style="color:#F92672;">?$</span><span style="color:#E6DB74;">/</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">                use: [</span><span style="color:#E6DB74;">&#39;cache-loader&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;babel-loader&#39;</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="hardsourcewebpackplugin" tabindex="-1"><a class="header-anchor" href="#hardsourcewebpackplugin" aria-hidden="true">#</a> HardSourceWebpackPlugin</h3><blockquote><p><code>HardSourceWebpackPlugin</code> 为模块提供中间缓存，缓存默认的存放路径是: <code>node_modules/.cache/hard-source</code>。</p></blockquote><p>配置 <code>hard-source-webpack-plugin</code>，首次构建时间没有太大变化，但是第二次开始，构建时间大约可以节约 80%</p><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">npm install hard-source-webpack-plugin -D</span></span>\n<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">//webpack.config.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> HardSourceWebpackPlugin </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hard-source-webpack-plugin&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//...</span></span>\n<span class="line"><span style="color:#F8F8F2;">    plugins: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">HardSourceWebpackPlugin</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span></code></pre></div>',134);c.render=function(o,e){const c=s("OutboundLink");return n(),a(p,null,[F,l("p",null,[t,r,i,y,d,u,l("a",b,[h,l(c)]),g]),E,l("blockquote",null,[l("p",null,[m,l("a",k,[D,l(c)]),f,v,x,j,B,q,w])]),A],64)};export default c;
