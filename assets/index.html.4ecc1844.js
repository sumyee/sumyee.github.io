import{r as e,o,c,a as d,F as l,b as n,d as r}from"./app.d8cb38ab.js";const a={},t=d("h1",{id:"webpack-概念",tabindex:"-1"},[d("a",{class:"header-anchor",href:"#webpack-概念","aria-hidden":"true"},"#"),n(" webpack 概念")],-1),p={class:"custom-container tip"},i=d("p",{class:"custom-container-title"},"概念",-1),s={href:"https://v4.webpack.docschina.org/concepts/",target:"_blank",rel:"noopener noreferrer"},u=n("webpack"),g=n(" 是一个现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图会映射项目所需的每个模块，并生成一个或多个 bundle。"),h=d("ul",null,[d("li",null,"从 wepack V4.0.0 开始， webpack 是开箱即用的")],-1),b=d("strong",null,"loader",-1),k=n("： 模块转换器，用于对模块的源代码进行转换。("),m={href:"https://webpack.docschina.org/concepts/loaders/#configuration",target:"_blank",rel:"noopener noreferrer"},w=n("webpack loader 从右到左 / 从底到顶执行"),f=n(")"),F=d("li",null,[d("strong",null,"plugins(插件)"),n("： 扩展插件，在 webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情")],-1),j=r('<blockquote><p>打包后文件 -&gt; 自执行函数</p></blockquote><h2 id="webpack-构建流程" tabindex="-1"><a class="header-anchor" href="#webpack-构建流程" aria-hidden="true">#</a> webpack 构建流程</h2><p>Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 :</p><ol><li><p><em><strong>初始化阶段：</strong></em></p><ol><li><p><strong>初始化参数</strong>：从配置文件、 配置对象、Shell 参数中读取，与默认配置结合得出最终的参数</p></li><li><p><strong>建编译器对象</strong>：用上一步得到的参数创建 <code>Compiler</code> 对象</p></li><li><p><strong>始化编译环境</strong>：包括注入内置插件、注册各种模块工厂、初始化 RuleSet 集合、加载配置的插件等</p></li><li><p><strong>开始编译</strong>：执行 <code>compiler</code> 对象的 <code>run</code> 方法</p></li><li><p><strong>确定入口</strong>：根据配置中的 <code>entry</code> 找出所有的入口文件，调用 <code>compilition.addEntry</code> 将入口文件转换为 <code>dependence</code> 对象</p></li></ol></li><li><p><em><strong>构建阶段：</strong></em></p><ol><li><strong>编译模块(make)</strong>：根据 <code>entry</code> 对应的 <code>dependence</code> 创建 <code>module</code> 对象，调用 <code>loader</code> 将模块转译为标准 JS 内容，调用 JS 解释器将内容转换为 AST 对象，从中找出该模块依赖的模块，再 递归 本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li><strong>完成模块编译</strong>：上一步递归处理所有能触达到的模块后，得到了每个模块被翻译后的内容以及它们之间的 <strong>依赖关系图</strong></li></ol></li><li><p><em><strong>生成阶段：</strong></em></p><ol><li><strong>输出资源(seal)</strong>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>Chunk</code>，再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li><strong>写入文件系统(emitAssets)</strong>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ol></li></ol><p><u>在以上过程中,Webpack 会在特定的时间点广播出特定的事件,插件在监听到感兴趣的事件后会执行特定的逻辑,并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</u></p><h2 id="module-chunk-和-bundle" tabindex="-1"><a class="header-anchor" href="#module-chunk-和-bundle" aria-hidden="true">#</a> module，chunk 和 bundle</h2><blockquote><p><code>module</code>，<code>chunk</code> 和 <code>bundle</code> 其实就是同一份逻辑代码在不同转换场景下的取了三个名字：</p><p>我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。</p></blockquote><ol><li>对于一份同逻辑的代码，当我们手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 <strong><code>module</code></strong> ；</li><li>当我们写的 module 源文件传到 webpack 进行打包时，webpack 会根据文件引用关系生成 <strong><code>chunk</code></strong> 文件，webpack 会对这个 chunk 文件进行一些操作；</li><li>webpack 处理好 chunk 文件后，最后会输出 <strong><code>bundle</code></strong> 文件，这个 bundle 文件包含了经过加载和编译的最终源文件，所以它可以直接在浏览器中运行。</li></ol><p><img src="https://i.loli.net/2021/07/20/yCTH2cPgXz1sfp8.png" alt="image-20210720160404133"></p><h2 id="流程图解" tabindex="-1"><a class="header-anchor" href="#流程图解" aria-hidden="true">#</a> 流程图解</h2><p><img src="https://i.loli.net/2021/07/22/YK4uE9Zg3GpQ7Hw.jpg" alt="e748c143c2474494989674e129daaa94_tplv-k3u1fbpfcp-zoom-1.jpg"></p><h2 id="编写loader的思路" tabindex="-1"><a class="header-anchor" href="#编写loader的思路" aria-hidden="true">#</a> 编写loader的思路</h2><p><strong>Loader</strong>：针对每个文件类型，<code>loader</code>是支持以数组的形式配置多个的，因此当<code>Webpack</code>在转换该文件类型的时候，会按顺序链式调用每一个<code>loader</code>，前一个<code>loader</code>返回的内容会作为下一个<code>loader</code>的入参。因此<code>loader</code>的开发需要遵循一些规范，比如返回值必须是标准的<code>JS</code>代码字符串，以保证下一个<code>loader</code>能够正常工作，同时在开发上需要严格遵循“单一职责”，只关心<code>loader</code>的输出以及对应的输出。</p><p><code>loader</code>函数中的<code>this</code>上下文由<code>webpack</code>提供，可以通过<code>this</code>对象提供的相关属性，获取当前<code>loader</code>需要的各种信息数据，事实上，这个<code>this</code>指向了一个叫<code>loaderContext</code>的<code>loader-runner</code>特有对象。</p>',14),S=r("<strong>Plugin</strong>：<code>webpack</code>基于发布订阅模式，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务，从而实现自己想要的功能。<code>compiler</code>和<code>compilation</code>是<code>Webpack</code>两个非常核心的对象，其中<code>compiler</code>暴露了和 <code>Webpack</code>整个生命周期相关的钩子（",14),W={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fapi%2Fcompiler-hooks%2F",target:"_blank",rel:"noopener noreferrer"},x=n("compiler-hooks"),A=n("），而"),y=d("code",null,"compilation",-1),C=n("则暴露了与模块和依赖有关的粒度更小的事件钩子（"),_={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fapi%2Fcompilation-hooks%2F",target:"_blank",rel:"noopener noreferrer"},J=n("Compilation Hooks"),q=n("）。"),v=d("code",null,"Webpack",-1),P=n("的事件机制基于"),E=d("code",null,"webpack",-1),H=n("自己实现的一套"),L=d("code",null,"Tapable",-1),T=n("事件流方案（"),z={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fwebpack%2Ftapable",target:"_blank",rel:"noopener noreferrer"},M=n("github"),D=n("）"),G=r("<p><code>Plugin</code>的开发和开发<code>Loader</code>一样，需要遵循一些开发上的规范和原则：</p><ul><li>插件必须是一个函数或者是一个包含 <code>apply</code> 方法的对象，这样才能访问<code>compiler</code>实例；</li><li>传给每个插件的 <code>compiler</code> 和 <code>compilation</code> 对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件;</li><li>异步的事件需要在插件处理完任务时调用回调函数通知 <code>Webpack</code> 进入下一个流程，不然会卡住;</li></ul>",2);a.render=function(n,r){const a=e("OutboundLink");return o(),c(l,null,[t,d("div",p,[i,d("p",null,[d("a",s,[u,d(a)]),g]),h]),d("ul",null,[d("li",null,[b,k,d("a",m,[w,d(a)]),f]),F]),j,d("p",null,[S,d("a",W,[x,d(a)]),A,y,C,d("a",_,[J,d(a)]),q]),d("p",null,[v,P,E,H,L,T,d("a",z,[M,d(a)]),D]),G],64)};export default a;
